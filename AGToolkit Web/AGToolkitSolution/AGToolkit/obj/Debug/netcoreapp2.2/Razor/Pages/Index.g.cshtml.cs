#pragma checksum "C:\Users\Benji\Development\GitRepoAGToolkit\AGToolkit Web\AGToolkitSolution\AGToolkit\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5ce77b39cc1790d90e9ee96b1f57c091b1f2d758"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AGToolkit.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Index.cshtml", typeof(AGToolkit.Pages.Pages_Index), null)]
namespace AGToolkit.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Benji\Development\GitRepoAGToolkit\AGToolkit Web\AGToolkitSolution\AGToolkit\Pages\_ViewImports.cshtml"
using AGToolkit;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5ce77b39cc1790d90e9ee96b1f57c091b1f2d758", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5584bf463797c4b1357f13b3879fd14c064aa189", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("needs-validation"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Users\Benji\Development\GitRepoAGToolkit\AGToolkit Web\AGToolkitSolution\AGToolkit\Pages\Index.cshtml"
  
    ViewData["Title"] = "Fret Position Calculator";

#line default
#line hidden
            BeginContext(86, 93, true);
            WriteLiteral("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.7.1.min.js\"></script>\r\n\r\n");
            EndContext();
            BeginContext(179, 89, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5ce77b39cc1790d90e9ee96b1f57c091b1f2d7585232", async() => {
                BeginContext(185, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(191, 68, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5ce77b39cc1790d90e9ee96b1f57c091b1f2d7585617", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(259, 2, true);
                WriteLiteral("\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(268, 85, true);
            WriteLiteral("\r\n\r\n<div>\r\n    <h1 class=\"display-4\">Fret Position Calculator</h1>\r\n    <p></p>\r\n    ");
            EndContext();
            BeginContext(353, 1531, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5ce77b39cc1790d90e9ee96b1f57c091b1f2d7587927", async() => {
                BeginContext(395, 1482, true);
                WriteLiteral(@"
        <div class=""form-row"">
            <div class=""col-md-3 mb-3"">
                <label for=""validationServer01"">Number of Frets</label>
                <input type=""number"" class=""form-control"" id=""numberOfFretsFormBox"" placeholder=""Ex.... 21, 22, 24"" min=""1"" max=""50"" step=""1"" required>
                <div class=""valid-feedback"">
                    Valid Value Entered!
                </div>
                <div class=""invalid-feedback"">
                    Please enter a WHOLE integer between 1 and 50!
                </div>
            </div>

            <div class=""col-md-3 mb-3"">
                <label for=""validationServer02"">Scale Length (In.)</label>
                <input type=""number"" class=""form-control"" id=""scaleLengthFormBox"" placeholder=""Ex.... 24.75, 25, 25.5"" min=""1"" max=""100"" step="".01"" required>
                <div class=""valid-feedback"">
                    Valid Value Entered!
                </div>
                <div class=""invalid-feedback"">
             ");
                WriteLiteral(@"       Please enter a decimal between 1 and 100!
                </div>
            </div>
        </div>

        <div class=""form-row"">
            <button class=""btn btn-primary btn-lg"" id=""calculateButton"" type=""button"" onclick=""buttonCalculation()"" disabled=""disabled"">Calculate</button>
            <button class=""btn btn-primary btn-lg"" id=""resetButton"" type=""button"" onclick=""window.location.reload()"">Reset Form</button>
        </div>
    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("novalidate", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1884, 4108, true);
            WriteLiteral(@"

    <br />

    <table class=""table table-striped table-dark table-sm"">
        <thead>
            <tr>
                <th scope=""col"">Fret Number</th>
                <th scope=""col"">Distance from Nut (In.)</th>
            </tr>
        </thead>
        <tbody id=""calculationTableData""></tbody>
    </table>
</div>

<!-- Create the HTML table based on the number of frets entered -->
<script>
    function createTable() {
        var table = '';
        var rows = document.getElementById('numberOfFretsFormBox').value;
        var cols = 2;
        for (var r = 0; r < rows; r++) {
            table += '<tr>';
            for (var c = 0; c < cols; c++) {
                table += '<td>' + c + '</td>';
            }
            table += '</tr>';
        }
    }
</script>

<!-- Calculates the fret positions, adds them to an array, and loads them into the table -->
<script>
    let scaleCalcData = [];
    var numberOfFrets;
    var scaleLength;

    // For-loop to loop the ca");
            WriteLiteral(@"lculation and populate the scaleCalcData array []
    function calculateAndLoadArray() {
        let location = 0;
        let distance = 0;
        let scalingFactor = 0;
        numberOfFrets = document.getElementById('numberOfFretsFormBox').value;
        scaleLength = document.getElementById('scaleLengthFormBox').value;

        for (i = 0; i < numberOfFrets; i++) {
            var obj = {};

            // Fret distance calculation
            location = scaleLength - distance
            scalingFactor = location / 17.817;
            distance += scalingFactor;
            
            // Loading the object and pushing to the array
            obj['fret'] = i + 1;
            obj['currentDistance'] = distance.toFixed(3);
            scaleCalcData.push(obj);
        }
    }
</script>

<script>
    // Button action event, loads the table and creates it on the page
    function buttonCalculation() {
        calculateAndLoadArray();
        loadTableData(scaleCalcData);
        s");
            WriteLiteral(@"caleCalcData = [];
    }
</script>

<!-- Create the table on the webpage -->
<script>
    function loadTableData(scaleCalcData) {
        const tableBody = document.getElementById('calculationTableData');
        let dataHtml = '';

        for (let calc of scaleCalcData) {
            dataHtml += `<tr><td>${calc.fret}</td><td>${calc.currentDistance}</td></tr>`;
        }
        console.log(dataHtml)

        tableBody.innerHTML = dataHtml;
    }
</script>

<!-- Number of Frets form input box focuses on pageload -->
<script type=""text/javascript"">document.getElementById('numberOfFretsFormBox').focus();</script>

<!-- Reset Button Logic -->
<script>
    function clearForm() {
        document.getElementById(""client"").reset();
    }
</script>

<!-- Form Input Validation -->
<script>
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
           ");
            WriteLiteral(@" var forms = document.getElementsByClassName('needs-validation');
            var eventList = [""change"", ""submit"", ""blur"", ""invalid"", ""input""];
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                for (event of eventList) {
                    form.addEventListener(event, function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                            document.getElementById('calculateButton').disabled = true;
                        }
                        else if (form.checkValidity() === true) {
                            document.getElementById('calculateButton').disabled = false;
                        }
                        form.classList.add('was-validated');
                    }, false);
                }
            });
        }, false);
    })()");
            WriteLiteral(";\r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
